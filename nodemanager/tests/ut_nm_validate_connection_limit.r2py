"""
Verify that the nodemanager accepts at most three connections 
(plus one pending) in parallel from a single source IP.

The limit is set in function connection_handler in nmconnectionmanager.py.
"""
#pragma repy restrictions.test dylink.r2py

affix_stack = dy_import_module("affix_stack.r2py")
rsa = dy_import_module("rsa.r2py")
sha = dy_import_module("sha.r2py")


nodeman_file = openfile("nodeman.cfg", False)
nodeman_content = "mydict = " + nodeman_file.readat(10000, 0)
nodeman_file.close()

new_namespace = createvirtualnamespace(nodeman_content, "nodeman")
nodeman_dict = new_namespace.evaluate({})
mypubkey = rsa.rsa_publickey_to_string(nodeman_dict["mydict"]["publickey"]).replace(" ", "")

my_name = sha.sha_hexhash(mypubkey)
myaffix = affix_stack.AffixStack("(CoordinationAffix)(NamingAndResolverAffix)")



openconnection = myaffix.openconnection

def waitonsocket(socketobj, num):
  try:
    socketobj.recv(1)
  except Exception, e:
    # this is good, the socket was closed...   This will usually be #5...
#    print num, e
    exitall()
  else:
    log("Error, should not return from recv!?!\n")
  


if callfunc == 'initialize':

  timeout = 10

  # nm accept only three cons from an IP, since it may be processing one, the
  # maximum I should be able to get and use is four.   The other should be
  # closed.
  junk1 = openconnection(my_name, <nodemanager_port>, getmyip(), <connport>, timeout)
  junk2 = openconnection(my_name, <nodemanager_port>, getmyip(), <connport1>, timeout)
  junk3 = openconnection(my_name, <nodemanager_port>, getmyip(), <connport2>, timeout)
  junk4 = openconnection(my_name, <nodemanager_port>, getmyip(), <connport3>, timeout)
  junk5 = openconnection(my_name, <nodemanager_port>, getmyip(), <connport4>, timeout)
  createthread(waitonsocket(junk1,1))
  createthread(waitonsocket(junk2,2))
  createthread(waitonsocket(junk3,3))
  createthread(waitonsocket(junk4,4))
  createthread(waitonsocket(junk5,5))

  sleep(5)
  log("Error:Can happily block on 5 nm connections!?!\n")
  exitall()
#  sockobj.close()
